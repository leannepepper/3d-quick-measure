/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { TriangleSolid } from "./TriangleSolid";
import { GlitterMaterial } from "three-glitter-material";

type GLTFResult = GLTF & {
  nodes: {
    Cone_cell004: THREE.Mesh;
    Cone_cell004_1: THREE.Mesh;
    Cone_cell005: THREE.Mesh;
    Cone_cell005_1: THREE.Mesh;
    Cone_cell001_1: THREE.Mesh;
    Cone_cell001_2: THREE.Mesh;
    Cone_cell002_1: THREE.Mesh;
    Cone_cell002_2: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
  };
};

type ActionName =
  | "Cone_cellAction"
  | "Cone_cell.001Action"
  | "Cone_cell.002Action"
  | "Cone_cell.003Action";
//type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function Triangle({
  visible,
  ...props
}: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/models/triangleFracture3.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    if (visible)
      Object.keys(actions).forEach((key) => {
        actions[key].repetitions = 0;
        actions[key].clampWhenFinished = true;
        actions[key].play();
      });
  }, [visible]);

  const customUniforms = {
    uGlitterSize: { value: 30.0 },
    uGlitterDensity: { value: 1.0 },
  };

  const glitterMaterial = new GlitterMaterial(customUniforms, {
    color: "#142af5",
  });

  return (
    <group ref={group} {...props} dispose={null}>
      {!visible ? (
        <TriangleSolid position={[-0.1, 2.24, 0.26]} />
      ) : (
        <>
          <group name="Cone_cell" position={[-0.08, 5, -0.47]}>
            <mesh
              geometry={nodes.Cone_cell004.geometry}
              material={nodes.Cone_cell004.material}
            />
            <mesh
              geometry={nodes.Cone_cell004_1.geometry}
              material={glitterMaterial}
            />
          </group>
          <group name="Cone_cell001" position={[0.34, 5.04, 0.26]}>
            <mesh
              geometry={nodes.Cone_cell005.geometry}
              material={nodes.Cone_cell005.material}
            />
            <mesh
              geometry={nodes.Cone_cell005_1.geometry}
              material={glitterMaterial}
            />
          </group>
          <group name="Cone_cell002" position={[-0.66, 4.95, 0.29]}>
            <mesh
              geometry={nodes.Cone_cell001_1.geometry}
              material={nodes.Cone_cell001_1.material}
            />
            <mesh
              geometry={nodes.Cone_cell001_2.geometry}
              material={glitterMaterial}
            />
          </group>
          <group name="Cone_cell003" position={[-0.05, 6, 0.19]}>
            <mesh
              geometry={nodes.Cone_cell002_1.geometry}
              material={nodes.Cone_cell002_1.material}
            />
            <mesh
              geometry={nodes.Cone_cell002_2.geometry}
              material={glitterMaterial}
            />
          </group>
        </>
      )}
    </group>
  );
}

useGLTF.preload("/models/triangleFracture3.glb");
