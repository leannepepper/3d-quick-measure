/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { a, useSpring } from "@react-spring/three";

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

function Box({
  config = { mass: 5, tension: 400, friction: 50, precision: 0.0001 },
}) {
  const [active, set] = useState(false);
  const { spring } = useSpring({ spring: Number(active), config });

  const scale = spring.to([0, 1], [1, 2]);
  const rotation = spring.to([0, 1], [0, Math.PI]);
  const color = spring.to([0, 1], ["#6246ea", "#e45858"]);
  return (
    <a.mesh
      castShadow
      rotation-y={rotation}
      scale-x={scale}
      scale-z={scale}
      onClick={() => set(!active)}
    >
      <boxBufferGeometry />
      <a.meshStandardMaterial roughness={0.5} color={color} />
    </a.mesh>
  );
}

export function CubeOutline({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const meshRef = useRef<THREE.Mesh>();
  const { nodes, materials } = useGLTF("/models/cubeOutline.glb") as GLTFResult;
  const config = { mass: 5, tension: 400, friction: 50, precision: 0.0001 };

  const [active, set] = useState(false);
  const { spring } = useSpring({ spring: Number(active), config });

  const rotation = spring.to([0, 1], [0, Math.PI]);
  useEffect(() => {
    const id = setInterval(() => set((currentActive) => !currentActive), 2000);
    return () => clearInterval(id);
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <a.mesh
        ref={meshRef}
        geometry={nodes.Cube.geometry}
        material={materials["Material.001"]}
        position={[0, 0, 0]}
        rotation-y={rotation}
      />
    </group>
  );
}

useGLTF.preload("/models/cubeOutline.glb");
