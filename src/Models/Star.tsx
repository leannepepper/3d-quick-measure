/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import * as React from "react";
import { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { GlitterMaterial } from "three-glitter-material";
import { DragControls } from "three/examples/jsm/controls/DragControls";
import { useThree } from "@react-three/fiber";
import { useEffect } from "react";

// const customUniforms = {
//   uGlitterSize: { value: 30.0 },
//   uGlitterDensity: { value: 1.0 },
// };

// const glitterMaterial = new GlitterMaterial(customUniforms, {
//   color: "#a007f2",
// });

type GLTFResult = GLTF & {
  nodes: {
    Sphere: THREE.Mesh;
    Sphere001: THREE.Mesh;
    Sphere002: THREE.Mesh;
  };
  materials: {};
};

export function Star({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { camera, gl } = useThree();
  const { nodes, materials } = useGLTF("/models/star.glb") as GLTFResult;

  useEffect(() => {
    const controls = new DragControls([group.current], camera, gl.domElement);
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.Sphere.geometry}
        material={nodes.Sphere.material}
        position={[0, 3.48, 0.13]}
        rotation={[0.38, 0, 0]}
        scale={0.46}
      />
      <mesh
        geometry={nodes.Sphere001.geometry}
        material={nodes.Sphere001.material}
        position={[0, 2.66, 0.88]}
        rotation={[1.27, 0, 0.03]}
        scale={0.46}
      />
      <mesh
        geometry={nodes.Sphere002.geometry}
        material={nodes.Sphere002.material}
        position={[0.17, 3.25, -1.2]}
        rotation={[-0.76, -0.19, -0.14]}
        scale={0.46}
      />
    </group>
  );
}

useGLTF.preload("/models/star.glb");
