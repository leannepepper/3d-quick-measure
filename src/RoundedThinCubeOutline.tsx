/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { a, useSpring } from "@react-spring/three";

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
  };
};

export function CubeOutline({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const meshRef = useRef<THREE.Mesh>();
  const { nodes, materials } = useGLTF(
    "/models/roundedThinCubeOutline.glb"
  ) as GLTFResult;
  const config = { mass: 5, tension: 400, friction: 50, precision: 0.0001 };

  const [active, set] = useState(false);
  const { spring: rotationSpring } = useSpring({
    spring: Number(active),
    config,
  });
  const { spring: positionSpring } = useSpring({
    spring: Number(active),
    config,
  });

  const rotation = rotationSpring.to([0, 1], [0, Math.PI]);
  const position = positionSpring.to([0, 1], [0, -6]);

  useEffect(() => {
    const id = setInterval(() => set((currentActive) => !currentActive), 2000);
    return () => clearInterval(id);
  }, []);
  return (
    <group ref={group} {...props} dispose={null}>
      <a.mesh
        ref={meshRef}
        geometry={nodes.Cube.geometry}
        material={materials.Material}
        position={[0, 0, 0]}
        position-y={position}
        rotation-z={rotation}
      />
    </group>
  );
}

useGLTF.preload("/models/roundedThinCubeOutline.glb");
